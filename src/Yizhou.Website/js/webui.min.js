jQuery(function($){
	$.datepicker.regional['zh-CN'] = {
        closeText: '关闭',
		prevText: '&#x3c;上月',
		nextText: '下月&#x3e;',
		currentText: '今天',
		monthNames: ['一月','二月','三月','四月','五月','六月',
		'七月','八月','九月','十月','十一月','十二月'],
		monthNamesShort: ['一','二','三','四','五','六',
		'七','八','九','十','十一','十二'],
		dayNames: ['星期日','星期一','星期二','星期三','星期四','星期五','星期六'],
		dayNamesShort: ['周日','周一','周二','周三','周四','周五','周六'],
		dayNamesMin: ['日','一','二','三','四','五','六'],
		dateFormat: 'yy-mm-dd', firstDay: 1,
		isRTL: false
		};
	$.datepicker.setDefaults($.datepicker.regional['zh-CN']);
});
jQuery.fn.extend({
    inputing: function(callback, delay){
        if(!delay){
            delay = 300;
        }
        var timer = null;
        this.keyup(function(){
            if(timer != null){
                clearTimeout(timer);
            }
            timer = setTimeout(callback, delay);
        });
    },
    horizontalForm: function(){
        this.find(".form-group")
            .each(function(){
                var $this = $(this);
                var parentWidth = $this.parent().width();
                var labelWidth = $this.find(".control-label").outerWidth() || 0;
                $this.find(".control-input").outerWidth(parentWidth - labelWidth - 30);
            });
    }
});
jQuery.extend({
    resolveUrl: function(path, param){
        var query = "";
        if(param){
            query = $.param(param);
        }
        if(path.indexOf("?") > -1){
            return $.baseUrl + path + query;
        }
        else{
            return $.baseUrl + path + "?" + query;
        }
    },
    toJSON: function(json){
        return JSON.stringify(json);
    },
    formatDate: function(date){
        if(!date){
            return "";
        }
        else if(typeof(date) === "string"){
            return date.split("T")[0];
        }
        else if(typeof(date) === "object"){
            var year = date.getFullYear().toString(),
                month = date.getMonth() + 1,
                day = date.getDate() ;
            return year + month + day;
        }
        return "";
    },
    toISODate: function(value){
        if(!value){
            return "";
        }
        else if(typeof(value) === "string"){
            return value + "T00:00:00";
        }
        else if(typeof(value) === "object"){
             var year = value.getFullYear().toString(),
                month = value.getMonth() + 1,
                date = value.getDate();
            return year + month + date + "T00:00:00";
        }
        return "";
    },
    download: function(url){
        if(!$(".__downloadIFrame").length){
            $("body").append("<iframe class='__downloadIFrame' style='display:none'></iframe>");
        }
        $(".__downloadIFrame").attr("src", url);
    }
});

$.ajaxSetup ({
    cache: false
});

Array.prototype.find = function(action){
    var value;
    $.each(this, function(){
        if(action(this)){
            value = this;
            return false;   
        }
    });
    return value;
}
Array.prototype.sum = function(prop){
    var sumValue = 0, tempValue;
    $.each(this, function(){
        tempValue = prop(this);
        if($.isNumeric(tempValue)){
            sumValue += prop(this);
        }
    });
    return sumValue.toFixed(2);
}
String.prototype.format = function() {
 
    // Convert `arguments` to real []
 
    var args = Array.prototype.slice.call(arguments);
   
    // First arg is an object map
   
    if (args.length === 1 && typeof args[0] === "object") {
        args = args[0];
    }
   
    // Do the replacing/formatting; args is now an object
   
    var result = this, match;
        
    for (var i = 0; match = /\${(\d+|\w+)?}/gm.exec(result); i++) {
    
        var key = match[1];
        
        if (!key) {
            result = result.replace("{}", args[i]);
        }
        else {
            result = result.replace(new RegExp("\\$\\{" + key + "\\}", "gm"), args[key]);
        }
    }
    
    return result.toString();
};
(function($){
    $.widget("webui.input", {
            options: {

            },
            _create: function(){
                var thiz = this;
                this._changedEvents = [];
                this._name = this.options.name || this.element.attr("name");
                this._defaultValue = this.options.defaultValue || this.element.data("defaultValue");
                this._required = this.options.required || this.element.data("required");
                this._requriedMessage = this.options.requiredMessage || this.element.data("requiredMessage");
                this._readonly = this.options.readonly || this.element.data("readonly");
                this._validator = this.options.validator || this.element.data("validator");
                this._createTextElement();
                this._createMessagePopover();
                this._onCreated();
                if(this.element.is(":input")){
                    this.element.change(function(){
                        thiz._changed();
                    });
                }
                this.reset();
            },
            _createTextElement: function(){
                this._textElement = $("<p style=\"display: none\" class=\"form-control-static\"></p>");
                this.element.after(this._textElement);
            },
            _createMessagePopover: function(){
                this.element.popover({"content": "", placement: "right", trigger: "manual", container: "body"});
            },
            _onCreated: function(){
                
            },
            reset: function(){
                this.setValue(this._defaultValue);
                this.setReadonly(this._readonly);
            },
            _onChanging: function(){
                
            },
            _changed: function(){
                this._onChanging();
                var thiz = this;
                this.validate();
                var value = this.getValue();
                $.each(this._changedEvents, function(){
                    this(thiz, value);
                });
            },
            changed: function(callback){
                if(callback){
                    this._changedEvents.push(callback);
                }
                else{
                    this._changed();
                }
            },
            inputing: function(callback, delay){
                var thiz = this;
                this.element.inputing(function(){
                    var value = thiz.getValue();
                    callback(thiz, value);
                }, delay);
            },
            getName: function(){
                return this._name;
            },
            setError: function(error){
                if(error){
                    this.element.closest(".form-group").addClass("has-error");
                }
                else{
                     this.element.closest(".form-group").removeClass("has-error");
                }
            },
            popMessage: function(message){
                this.element.attr('data-content', message).popover('show');
            },
            hidePopMessage: function(){
                this.element.popover('hide');
            },
            _validateRequired: function(value){
                if(this._required && value === null){
                    if(this._requriedMessage){
                        $.messageBox.info(this._requriedMessage);
                    }
                    return false;
                }
                return true;
            },
            _validateValidator: function(value){
                if(this._validator){
                    return window[this._validator](this, value);
                }
                return true;
            },
            validate: function(){
                var value = this.getValue(), result = null;
                result = this._validateRequired(value);
                if(result){
                    result = this._validateValidator(value);
                }
                this.setError(!result);
                return result;
            },
            focus: function(){
                if(this.element.css("display") !== "none"){
                    this.element.focus();
                }
            },
            setDefaultValue: function(value){
                this._defaultValue = value;
            },
            getDefaultValue: function(){
                return this._defaultValue;
            },
            setValue: function(value){
                this.element.val(value);
                this._textElement.html(value);
            },
            getValue: function(){
                var value = this.element.val();
                value = jQuery.trim(value);
                if(value){
                    return value;
                }
                return null;
            },
            setRequired: function(required){
                this._required = required;
            },
            getRequired: function(){
                return this._required;
            },
            setReadonly: function(readonly){
                this._readonly = readonly;
                var value = this.getValue();
                this.setValue(value);
                if(this._readonly){
                    this._textElement.show();
                    this.element.hide();
                }
                else{
                    this._textElement.hide();
                    this.element.show();
                }
            },
            getReadonly: function(){
                return this._readonly;
            }
        }
    );
})(jQuery);
(function($){
 $.widget("webui.hiddenInput", $.webui.input, {
            options: {
                name: null
            },
            setReadonly: function(readonly){
                this._readonly = readonly;
            },
            getReadonly: function(){
                return this._readonly;
            }
        }
    );  
})(jQuery); 
(function($){
 $.widget("webui.textbox", $.webui.input, {
   options: {
    required: false,
                suggestions: null,
                name: null,
                defaultValue: null
            },
            _onCreated: function(){
                var regex = this.options.regex || this.element.data("regex");
                this._regexMessage = this.options.regexMessage || this.element.data("regexMessage");
                this._suggestions = this.options.suggestions || this.element.data("suggestions");
                
                if(this._suggestions){
                    this._createSuggestion();
                }
                if(regex){
                    this._regex = new RegExp(regex);
                }
            },
            _createSuggestion: function(){
                function split(val) {
                    return val.split(multipleSymbolRegex);
                }
                function extractLast(term) {
                    return split(term).pop();
                }

                var multipleSymbolRegex = /[,，、\\；;]\s*/,
                    multipleSymbolEndRegex = /[,，、\\；;]$/,
                    suggestions = this._suggestions;
                this.element.autocomplete({
                    source: function (request, response) {
                        response($.ui.autocomplete.filter(suggestions, extractLast(request.term)));
                    },
                    focus: function () {
                        return false;
                    },
                    minLength: 0,
                    select: function (event, ui) {
                        var val = $(this).val();
                        if (multipleSymbolEndRegex.test(val)) {
                            $(this).val( val + ui.item.value);
                        }
                        else {
                            $(this).val(ui.item.value);
                        }
                        return false;
                    }
                })
                .click(function () {
                    $(this).autocomplete("search", "");
                });
            }
        }
    );  
})(jQuery); 
(function($){
    $.widget("webui.dateInput", $.webui.input, {
            options: {
                required: false,
                name: null,
                defaultValue: null
            },
            _onCreated: function(){
                this.element.datepicker();
            },
            getValue: function(){
                var value = this.element.val();
                if(value){
                    return $.toISODate(value);
                }
                return null;
            },
            setValue: function(value){
                var dateFormat = $.formatDate(value);
                this.element.val(dateFormat);
                this._textElement.html(dateFormat);
            }
        }
    );
})(jQuery);
(function($){
    $.widget("webui.checkboxList", $.webui.input, {
            _onCreated: function(){
                var thiz = this;
                this.element.find("input").click(function(){
                    thiz._changed();
                });
            },
            getValue: function(){
                var value = this.element.find(":checked")
                    .map(function(){
                        return $(this).val();
                    })
                    .get();
                if(value.length){
                    return value;
                }
                else{
                    return null;
                }
            },
            setValue: function(value){
                if(value){
                    this.element.find("input").each(function(){
                        var index = $.inArray($(this).val(), value);
                        $(this).prop("checked", index > -1);
                    });

                    this._textElement.html(value.toString());
                }
                else{
                    this.element.find("input").each(function(){
                        $(this).prop("checked", false);
                    });

                    this._textElement.html("");
                }
            },
            setReadonly: function(readonly){
                this._readonly = readonly;
                this.element.find("input").prop("disabled", readonly);
            }
        }
    );
})(jQuery);
(function($){
    $.widget("webui.dateRangeInput", $.webui.input, {
            _onCreated: function(){
                var thiz = this, inputs;
                inputs = this.element.find("input");
                this._startInput = inputs.eq(0).dateInput().data("dateInput");
                this._endInput = inputs.eq(1).dateInput().data("dateInput");
                inputs.change(function(){
                    thiz._changed();
                });
            },
            validate: function(){
                var value = this.getValue(), result = null;
                
                result = this._validateRequired(value);
                if(result){
                    result = this._validateValidator(value);
                }
                if(result){
                    result = this._validateRange(value);
                }
                this.setError(!result);
                return result;
            },
            _validateRange: function(value){
                var result = true;
                if(value && value.start && value.end && (value.start > value.end)){
                    result = false;
                    this.popMessage("最小值不能大于最大值！");
                }
                else{
                    this.hidePopMessage();
                }
                return result;
            },
            focus: function(){
                this._startInput.focus();
            },
            getValue: function(){
                var start = this._startInput.getValue();
                var end = this._endInput.getValue();
                if(start || end){
                    return {start: start, end: end};
                }
                return null;
            },
            setValue: function(value){
                var start = null, end = null;
                if(value){
                    start = value.start;
                    end = value.end;
                }
                this._startInput.setValue(start);
                this._endInput.setValue(end);
                start = $.formatDate(start);
                end = $.formatDate(end);
                this._textElement.html(start + " - " + end);
            }
        }
    );
})(jQuery);
(function($){

    $.widget("webui.form", {
            options: {
                sections: null
            },
            _create: function(){
                var thiz = this;
                this._inputs = {};
                
                $.each($.webui.form.inputTypes, function(){
                    var typeName, inputs, input;
                    typeName = this.typeName;
                    inputs = thiz.element.find(this.selector)[typeName]();
                    inputs.each(function(){
                        input = $(this).data(typeName);
                        thiz._inputs[input.getName()] = input;
                    });
                });
            },
            getValue: function(){
                var value = {};
                $.each(this._inputs, function(name, input){
                    value[name] = input.getValue();
                });
                return value;
            },
            setValue: function(value){
                for(var name in value){
                    if(name in this._inputs){
                        this._inputs[name].setValue(value[name]);
                    }
                }
            },
            setReadonly: function(readonly){
                $.each(this._inputs, function(name, input){
                    input.setReadonly(readonly);
                });
            },
            reset: function(readonly){
                $.each(this._inputs, function(name, input){
                    input.reset(readonly);
                });
            },
            validate: function(){
                var invalidInputs = [];
                $.each(this._inputs, function(name, input){
                    if(!input.validate()){
                       invalidInputs.push(input);
                    }
                });
                if(invalidInputs.length > 0){
                    invalidInputs[0].focus();
                    return false;
                }
                return true;
            },
            getInput: function(name){
                return this._inputs[name];
            },
            setInput: function(name, input){
                this._inputs[name] = input;
            },
            changed: function(callback){
                $.each(this._inputs, function(name, input){
                    input.changed(function(_input, value){
                        callback(_input, value);
                    });
                });
            },
            inputing: function(callback, delay){
                $.each(this._inputs, function(name, input){
                    input.inputing(function(_input, value){
                        callback(_input, value);
                    }, delay);
                });
            }
        }
    );
    
    $.webui.form.inputTypes = [
        {typeName: "hiddenInput", selector: ".webui-hidden"},
        {typeName: "checkboxList", selector: ".webui-checkboxList"},
        {typeName: "dateInput", selector: ".webui-dateInput"},
        {typeName: "dateRangeInput", selector: ".webui-dateRangeInput"},
        {typeName: "numberInput", selector: ".webui-numberInput"},
        {typeName: "numberRangeInput", selector: ".webui-numberRangeInput"},
        {typeName: "radioList", selector: ".webui-radioList"},
        {typeName: "simpleSelect", selector: ".webui-simpleSelect"},
        {typeName: "textarea", selector: ".webui-textarea"},
        {typeName: "textbox", selector: ".webui-textbox"},
        {typeName: "complexSelect", selector: ".webui-complexSelect"},
        {typeName: "datagrid", selector: ".webui-datagrid"},
        {typeName: "boolRadio", selector: ".webui-boolRadio"}
    ];

})(jQuery);

(function($){
    $.widget("webui.numberInput", $.webui.input, {
            options: {
                required: null,
                name: null,
                max: null,
                min: null,
                precision: null,
                defaultValue: null
            },
            _onCreated: function(){
                this._precision = this.options.precision || this.element.data("precision");
                this._max = this.options.max || this.element.data("max");
                this._min = this.options.min || this.element.data("min");
                if(this._precision > 0){
                    this._numberRegex = new RegExp("^[-,+]?[0-9]+(.[0-9]{0,${0}})?$".format(this._precision));
                }
                else{
                    this._numberRegex = new RegExp("^[-,+]?[0-9]*[1-9][0-9]*$");
                }
            },
            validate: function(){
                var value = $.trim(this.element.val()), result = null;
                result = this._validateFormat(value);
                value = this.getValue();
                if(result){
                    result = this._validateValidator(value);
                }
                if(result){
                    result = this._validateRange(value);
                }
                if(result){
                    result = this._validateRequired(value);
                }
                
                this.setError(!result);
                return result;
            },
            _validateFormat: function(value){
                var result = true;
                if(value){
                    if(!this._numberRegex.test(value)){
                        result = false;
                        this.popMessage("格式错误！");
                    }
                    else{
                        this.hidePopMessage();
                    }
                }
                return result;
            },
            _validateRange: function(value){
                var result = true;
                if(value){
                    value = parseFloat(value);
                    if((value > this._max) || (value < this._min)){
                        result = false;
                        this.popMessage("不能超出范围:"+ this._min + "-" + this._max);
                    }
                    else{
                        this.hidePopMessage();
                    }
                }
                return result;
            },
            getValue: function(){
                var value = this.element.val();
                value = parseFloat(value);
                if(!$.isNumeric(value)){
                    return null;
                }
                return value;
            },
            setValue: function(value){
                var text = "";
                value = parseFloat(value);
                if($.isNumeric(value)){
                    text = value.toFixed(this._precision);
                }
                else{
                    text = "";
                }
                this.element.val(text);
                this._textElement.html(text);
            }
        }
    );
})(jQuery);

(function($){
    $.widget("webui.numberRangeInput", $.webui.input, {
            options: {
                required: null,
                name: null,
                defaultValue: null
            },
            _onCreated: function(){
                var thiz = this, inputs;
                inputs = this.element.find("input");
                this._minInput = inputs.eq(0);
                this._maxInput = inputs.eq(1);
                inputs.change(function(){
                    thiz._changed();
                });
            },
            validate: function(){
                var value = this.getValue(), result = null;
                result = this._validateRequired(value);
                if(result){
                    result = this._validateValidator(value);
                }
                if(result){
                    result = this._validateRange(value);
                }
                this.setError(!result);
                return result;
            },
            _validateRange: function(value){
                var result = true;
                if(value && value.min > value.max){
                    result = false;
                    this.popMessage("最小值不能大于最大值！");
                }
                return result;
            },
            focus: function(){
                if(this._minInput.css("display") !== "none"){
                    this._minInput.focus();
                }
            },
            getValue: function(){
                var min = this._minInput.val(),
                    max = this._maxInput.val();

                min = this._parseFloat(min);
                max = this._parseFloat(max);
                if($.isNumeric(min) || $.isNumeric(max)){
                    return {min: min, max: max};
                }
                return null;
            },
            setValue: function(value){
                var min = "", max = "";
                if(value){
                    min = $.isNumeric(value.min) ? value.min : "";
                    max = $.isNumeric(value.max) ? value.max : "";
                }

                this._minInput.val(min);
                this._maxInput.val(max);
                this._textElement.html(min.toString() + " - " + max.toString());
            },
            _parseFloat: function(value){
                value = parseFloat(value);
                if($.isNumeric(value)){
                    return value;
                }
                else{
                    return null;
                }
            }
        }
    );
})(jQuery);
(function($){
    $.widget("webui.radioList", $.webui.input, {
            _onCreated: function(){
                var thiz = this;
                this.element.find("input").click(function(){
                    thiz._changed();
                });
            },
            getValue: function(){
                var checkedRadios = this.element.find(":checked");
                if(checkedRadios.length){
                    return checkedRadios.eq(0).val();
                }
                return null;
            },
            setValue: function(value){
                if(value != null){
                    value = value.toString();
                    this.element.find("input").each(function(){
                        if($(this).val() === value){
                            $(this).prop("checked", true);
                        }
                    });

                    this._textElement.html(value);
                }
                else{
                    this.element.find("input").each(function(){
                        $(this).prop("checked", false);
                    });

                    this._textElement.html("");
                }
            },
            setReadonly: function(readonly){
                this._readonly = readonly;
                this.element.find("input").prop("disabled", readonly);
            }
        }
    );
})(jQuery);


(function($){
    $.widget("webui.textarea", $.webui.input, {
            setValue: function(value){
                if(value !== null && value !== undefined){
                    value = value.toString();
                    this.element.val(value);
                    value = value.replace(/\n/g, "</br>");
                    this._textElement.html(value);
                }
                else{
                    this.element.val("");
                    this._textElement.html("");
                }
            }
        }
    );
})(jQuery);
(function( $, undefined ) {
var dagaridRenders = {
    int: function(value){
        if($.isNumeric(value)){
            return value.toFixed(0);
        }
        return value;
    },
    number1: function(value){
        if($.isNumeric(value)){
            return value.toFixed(1);
        }        
        return value;
    },
    number2: function(value){
        if($.isNumeric(value)){
            return value.toFixed(2);
        }
        return value;
    },
    number3: function(value){
        if($.isNumeric(value)){
            return value.toFixed(3);
        }        
        return value;
    },
    date: function(value){
        return $.formatDate(value);
    },
    shifou: function(value){
        return value ? "是" : "否";
    },
    name: function(value){
        if(value){
            return value.name;
        }
        return "";
    }
}
var cloumnDefaultWidth = 100;

$.widget( "webui.datagrid", $.webui.input, {
    _headerCells: null,
    _rows: null,
    options: {
        columns: null,
        singleSelect: false,
        width: null,
        height: null,
        data: null,
        showNumberColumn: false,
        name: null,
        defaultValue: null,
        required: false,
        readonly: false,
        hideHeader: false,
        bordered: true,
        textWrap: false
    },
    _onCreated: function() {
        this._defaultValue = this.options.data;
        this._footer = this.options.footer;
        var self = this, header, headerContent, body, bodyContent;
        this._headerCells = [];
        this._rows = [];
        this.element.addClass("ui-datagrid");
        
        if(this.options.columns === null || !this.options.columns.length){
            return;
        }
        header = this._header = $("<div class='ui-datagrid-header'><div class='ui-datagrid-header-content'><table class='table table-bordered'><thead><tr></tr></thead></table></div></div>");

        this.element.append(header);
        headerContent = this._headerContent = header.children(".ui-datagrid-header-content");
        
        body = this._body = $("<div class='ui-datagrid-body'><div class='ui-datagrid-body-content'><table class='table table-bordered table-hover'></table></div></div>");
        bodyContent = this._bodyContent = body.find("table");
        body.scroll(function(){
            header.scrollLeft($(this).scrollLeft());
        });
        this.element.append(body);
        if(!this.options.bordered){
            this.element.find("table").removeClass("table-bordered");
        }
        if(this.options.textWrap){
            this.element.addClass("wrap")
        }else{
            this.element.addClass("ellipsis")
        }

        if(!this.options.hideHeader){
            this._renderHeader();
        }
        this._renderWidth();
        this._renderHeight();
        $(window).resize(function() {
            self._renderWidth();
            self._renderHeight();
        });
    },
    _renderHeader: function(){
        this._renderHeaderNumberCell();
        this._renderHeaderCheckboxCell();
        this._renderHeaderCells();
    },
    _renderHeaderNumberCell: function(){
        this._header.find(".ui-datagrid-header-numbercell").remove();
        if(this.options.showNumberColumn){
            var th = $("<th class='ui-datagrid-header-numbercell' ><div class='ui-datagrid-header-cell'></div></th>");
            this._header.find("tr").append(th);
        }
    },
    _renderHeaderCheckboxCell: function(){
        var self = this, th;
        this._header.find(".ui-datagrid-header-checkbox-cell").remove();
        if(!this.options.singleSelect){
            th = $("<th class='ui-datagrid-header-checkbox-cell' ><div class='ui-datagrid-header-cell'><input type='checkbox'/></div></th>");
            th.click(function(ev){
                self._onHeaderCheckboxCell_click($(this));
                ev.stopPropagation();
            });
            this._header.find("tr").append(th);
        }
    },
    _renderHeaderCells: function(){
        var self = this, datagridHeight;
        if(this._headerCells && this._headerCells.length){
            $.each(this._headerCells, function () {
                $(this.element).remove();
            });
        }
        datagridHeight = self._getHeight();
        this._headerCells = [];
        $.each(this.options.columns, function(i, column){
            var cellElement, th, index, cellHeight, cell;
            cellElement = $("<div class='ui-datagrid-header-cell'></div>");
            if(column.sortDirection === "desc"){
                cellElement.append("<span class='ui-datagrid-header-sort-icon'>▼</span>");
            }
            else if(column.sortDirection === "asc"){
                cellElement.append("<span class='ui-datagrid-header-sort-icon'>▲</span>");
            }
            cellElement.append("<span class='ui-datagrid-header-title'>" + column.title + "</span>");
            th = $("<th></th>").append(cellElement);
            self._header.find("tr").append(th);
            index = self._header.find("th").index(th);
            cellHeight = cellElement.outerHeight();
            cellElement.resizable({
                handles: "e",
                helper: "ui-datagrid-resize-helper",
                resize: function (event, ui) {
                    ui.helper.css("height", datagridHeight);
                },
                start: function(){
                    datagridHeight = self._getHeight();
                },
                stop: function(event, ui){
                    ui.originalElement.css("height", "auto");
                    self._header.find("colgroup").find("col").eq(index).css("width", ui.size.width);
                    self._body.find("colgroup").find("col").eq(index).css("width", ui.size.width);
                    cellElement.css("width", ui.size.width);
                    
                }
            });
            cell = {element: th, column: column};
            self._headerCells.push(cell);
            cellElement.click(function(){
                if(self.options.canSort){
                    self.sortBy(column.name, self._toggleDirection(column.sortDirection));
                }
            });
        });
    },
    _toggleDirection: function(direction){
        if(direction === "desc"){
            return "asc";
        }else{
            return "desc";
        }
    },
    sortBy: function(columnName, direction){
        var cells, cell;
        cells = $.grep(this._headerCells, function(cell){
            return cell.column.name === columnName;
        });
        if(cells && cells.length){
            this._header.find(".ui-datagrid-header-sort-icon").remove();
            cell = cells[0];
            cell.column.sortDirection = direction;
            if(direction === "desc"){
                cell.element.find(".ui-datagrid-header-cell").append("<span class='ui-datagrid-header-sort-icon'>▼</span>");
            }
            else if(direction === "asc"){
                cell.element.find(".ui-datagrid-header-cell").append("<span class='ui-datagrid-header-sort-icon'>▲</span>");
            }
            this._trigger("sort", null, columnName + " " + direction);
        }
    },
    _renderHeight: function(){
        var height = this._getHeight(), headerHeight;
        if(height){
            headerHeight = this._header.height();
            if(height >= headerHeight){
                this._body.height(height - headerHeight);
            }
        }
    },
    _getHeight: function () {
        var height, documentHeight, bodyPaddingHeight, parentHeight;
        if(this.options.height === "auto"){
            documentHeight= $(window).height();
            bodyPaddingHeight = $(document.body).innerHeight() - $(document.body).height();
            parentHeight = this.element.parent().height() - this.element.height();
            height  = documentHeight - parentHeight - bodyPaddingHeight;
        }
        else if(this.options.height){
            height = this.options.height;
        }
        return height;
    },
    _renderWidth: function(){
        if(this.options.width){
            this._header.css("width", this.options.width);
            this._body.css("width", this.options.width);
            this._headerContent.css("width", this.options.width);
            var headerTableWidth = this._headerContent.find("table").width();
            if(this._headerContent.width() < headerTableWidth + 30){
                this._headerContent.width(headerTableWidth + 30);
            }
        }
        
        var colgroup = this._getColgroup();
        this._header.find("colgroup").remove();
        this._body.find("colgroup").remove();
        this._header.find("table").prepend(colgroup);
        this._body.find("table").prepend(colgroup);
    },
    _getColgroup: function(){
        var colsHtml = "", width, knownWidth = 0, usableWidth = 0;
        $.each(this.options.columns, function(i, column){
            if($.isNumeric(column.width)){
                knownWidth += column.width;
            }
            else if(!column.width){
                knownWidth += cloumnDefaultWidth;
            }
        });
        if(this.options.showNumberColumn){
            colsHtml += "<col style='width: 30px'>";
            knownWidth += 30;
        }
        if(!this.options.singleSelect){
            colsHtml += "<col style='width: 30px'>";
            knownWidth += 30;
        }
        var headerWidth = this._header.width();
        usableWidth = headerWidth - knownWidth - 30;
        if(usableWidth < 0){
            usableWidth = 80;
        }
        $.each(this.options.columns, function(i, column){
            if($.isNumeric(column.width)){
                width = column.width;
            }
            else if(/%$/.test(column.width)){
                width = Math.floor(parseInt(column.width) * 0.01 * usableWidth) - 1;
            }
            else{
                width = cloumnDefaultWidth;
            }
            colsHtml += "<col style='width: "+ width +"px'>";
        });
        return "<colgroup>"+ colsHtml +"</colgroup>";
    },
    _renderBody: function(){
        var self = this;
        $.each(this._rows, function(i, row){
            self.deleteRow(row);
        });
        this._rows = [];
        if(this.options.data && this.options.data.length){
            $.each(this.options.data, function(i, data){
                self._renderRow(data);
            });
        }
        this._renderFooter();
    },
    _getRowTemplate: function(){
        var tr = $("<tr></tr>");
        if(this.options.showNumberColumn){
            $("<td></td>").attr("column-name", "number").appendTo(tr);
        }
        if(!this.options.singleSelect){
            $("<td></td>").attr("column-name", "checkbox").appendTo(tr);
        }
        $.each(this.options.columns, function(i, column){
            $("<td></td>").attr("column-name", column.name).appendTo(tr);
        });
        return tr;
    },
    _renderFooter: function(){
        var footerCell, footerCellValue, td, colspan, column, tr, gridValue,
            thiz = this;
        if(this._footerElement){
            this._footerElement.remove();
        }
        gridValue = this.getValue();
        if(gridValue.length && this._footer && this._footer.length){
            tr = this._getRowTemplate();
            this._footerElement = $("<tfoot></tfoot>").append(tr).appendTo(this._bodyContent);
            $.each(this._footer, function(){
                footerCell = this;
                //cell value
                switch(footerCell.valueType){
                    case "sum":
                        column = thiz.options.columns.find(function(col){return col.name == footerCell.columnName});
                        footerCellValue = gridValue.sum(function(value){return value[column.field]});
                        break;
                    case "fixed":
                        footerCellValue = footerCell.value;
                        break;
                }
                //colspan
                td = tr.find("td[column-name='"+footerCell.columnName+"']")
                    .text(footerCellValue);
                if(footerCell.colspan){
                    colspan = footerCell.colspan;
                    while(colspan > 1){
                        td.next().eq(0).remove();
                        colspan -= 1;
                    }
                    td.attr("colspan", footerCell.colspan);
                }
            })
        }
    },
    setFooter: function(footer){
        this._footer = footer;
        this._renderFooter();
    },
    _renderRow: function(data){
        var self = this, datarow;
        datarow = $("<tr></tr>").appendTo(this._bodyContent);
        datarow.datarow({
            columns: this.options.columns,
            showNumberCell: this.options.showNumberColumn,
            showCheckboxCell: !this.options.singleSelect,
            data: data
        })
        .bind("datarowselected", function(evt, row){self._onDatarow_selected(row);})
        .bind("datarowunselected", function(evt, row){self._onDatarow_unselected(row);})
        .bind("datarowchanged", function(){self._changed();})
        .click(function(){self._onDatarow_click($(this));})
        .dblclick(function(){self._onDatarow_dblclick($(this));});
        this._rows.push(datarow);
        this._refreshNumberRow();
        return datarow;
    },
    appendRow: function(data){
        var datarow = this._renderRow(data);
        this._trigger("addedRow", null, {row: datarow, data: data});
        this._changed();
    },
    afterRow: function(data, datarow1){
        var self = this, datarow;
        datarow = $("<tr></tr>");
        datarow1.after(datarow);
        datarow.datarow({
            columns: this.options.columns,
            showNumberCell: this.options.showNumberColumn,
            showCheckboxCell: !this.options.singleSelect,
            data: data
        })
        .bind("datarowselected", function(evt, row){self._onDatarow_selected(row);})
        .bind("datarowunselected", function(evt, row){self._onDatarow_unselected(row);})
        .bind("datarowchanged", function(){self._changed();})
        .click(function(){self._onDatarow_click($(this));})
        .dblclick(function(){self._onDatarow_dblclick($(this));});

        this._rows.push(datarow);
        this._refreshNumberRow();
        this._trigger("addedRow", null, {row: datarow, data: data});
        this._changed();
        return datarow;
    },
    _onChanging: function(){
        this._renderFooter();
    },
    _onDatarow_selected: function(row){
        if(this._bodyContent.find(".active").length === this._rows.length){
            this._header.find(".ui-datagrid-header-checkbox-cell input").attr("checked", "checked");
        }
        this._trigger("selectedRow", null, row);
    },
    _onDatarow_unselected: function(row){
        this._header.find(".ui-datagrid-header-checkbox-cell input").removeAttr("checked");
        this._trigger("unselectedRow", null, row);
    },
    _onDatarow_click: function(clickRow){
        $.each(this._rows, function(i, row){
            if(!row.is(clickRow)){
                row.datarow("unselect");
            }
        });
    },
    _onDatarow_dblclick: function(row){
        this._trigger("dblclickRow", null, row);
    },
    _onHeaderCheckboxCell_click: function(cell){
        if(cell.find("input").prop("checked")){
            this.selectAllRow();
        }
        else{
            this.unselectAllRow();
        }
    },
    selectAllRow: function(){
        $.each(this._rows, function(i, row){
            row.datarow("select");
        });
    },
    unselectAllRow: function(){
        $.each(this._rows, function(i, row){
            row.datarow("unselect");
        });
    },
    _refreshNumberRow: function(){
        if(this.options.showNumberColumn){
            var numberRows = this._bodyContent.find("tr td:first-child"), i = 0;
            for(; i < numberRows.length; i++){
                numberRows.eq(i).text(i + 1);
            }
        }
    },
    getRows: function(){
        return this._rows;
    },
    getRowsData: function(){
        return $.map(this._rows, function(row){
            return row.datarow("getValue");
        });
    },
    deleteSelectedRows: function(){
        var self = this, selectRows;
        selectRows = this.getSelectedRows();
        $.each(selectRows, function(i, row){
            self.deleteRow(row);
        });
        this._changed();
    },
    getSelectedRows: function(){
        var selectRows = $.grep(this._rows, function(row){
            return row.datarow("isSelected");
        });
        return selectRows;
    },
    getSelectedRow: function(){
        var selectRows = this.getSelectedRows();
        if(selectRows && selectRows.length){
            return selectRows[0];
        }
        return null;
    },
    deleteRow: function(deletedRow){
        if(typeof deletedRow === "number"){
            deletedRow = this._rows[deletedRow];
        }
        if(!deletedRow){
            return;
        }
        var self = this, rows = [], data;
        $.each(this._rows, function(i, row){
            if(row !== deletedRow){
                rows.push(row);
            }else{
                data = row.datarow("getValue");
                row.remove();
                self._trigger("deletedRow", null, data);
            }
        });
        this._rows = rows;
        this._header.find(".ui-datagrid-header-checkbox-cell input").removeAttr("checked");
        this._refreshNumberRow();
    },
    setValue: function(value){
        this.options.data = value;
        this._renderBody();
    },
    getValue: function(){
        return this.getRowsData();
    },
    setReadonly: function(readonly){
        this._readonly = readonly;
    },
    setColumns: function(columns){
        this.options.columns = columns;
        this._renderHeaderCells();
        this._renderBody();
    },
    setSize: function(size){
        if(size.width){
            this.options.width = size.width;
            this._renderWidth();
        }
        if(size.height){
            this.options.height = size.height;
            this._renderHeight();
        }
    }
});

    $.widget( "webui.datarow",{
        _cells: null,
        _selected: null,
        options: {
            columns: null,
            showNumberCell: null,
            showCheckboxCell: null,
            data: null
        },
        _create: function() {
            var self = this;
            this._value = this.options.data;
            this._cells = [];
            this._selected = false;
            this.element
                .click(function(){
                    if(self._selected){
                        self.unselect();
                    }
                    else{
                        self.select();
                    }
                });
        
            this._render();
        },
        _render: function(){
            this.element.empty();
            this._renderNumberCell();
            this._renderCheckboxCell();
            this._renderDataCells();
        },
        _renderDataCells: function(){
            var self = this, data = this.options.data, cell, td;
            this._cells = [];
            $.each(this.options.columns, function(i, column){
                cell = {};
                cell.column = column;
                td = $("<td class='ui-datagrid-cell'></td>");
                self.element.append(td);
                cell.element = td;
                self._renderCell(cell, data);
                self._cells.push(cell);
            });
        },
        _renderNumberCell: function(){
            if(this.options.showNumberCell){
                var td = $("<td class='ui-datagrid-numbercell'></td>");
                this.element.append(td);
            }
        },
        _renderCheckboxCell: function(){
            var self = this, td;
            if(this.options.showCheckboxCell){
                td = $("<td class='ui-datagrid-checkbox-cell'><input type='checkbox'/></td>");
                td.click(function(ev){
                    if(!$(ev.target).is("input")){
                        if($(this).find("input").attr("checked") === "checked"){
                            $(this).find("input").removeAttr("checked");
                        }
                        else{
                            $(this).find("input").attr("checked", "checked");
                        }
                    }
                    self._onCheckboxCell_click($(this), self.element);
                    ev.stopPropagation();
                });
                self.element.append(td);
            }
        },
        _renderCell: function(td, data){
            var self = this, cell = td.element, column = td.column, fieldValue = null, renderValue;
            cell.empty();
            if(column.field in data){
                fieldValue = data[column.field];
            }
            if(fieldValue === null){
                return;
            }
            if(typeof(column.render) === "string"){
                cell.text(dagaridRenders[column.render](fieldValue));
            }
            else if(column.render){
                renderValue = column.render(self.element, {data: data, value: fieldValue} );
                if(typeof renderValue === "string"){
                    cell.html(renderValue);
                }
                else if(typeof renderValue === "object"){
                    cell.append(renderValue);
                }
            }
            else if(column.field){
                if($.isArray(fieldValue)){
                    fieldValue = fieldValue.toString();
                }
                cell.html(fieldValue).attr("title", fieldValue);
            }
        },
        _onCheckboxCell_click: function(sender){
            if(sender.find("input").attr("checked") === "checked"){
                this.select();
            }
            else{
                this.unselect();
            }
        },
        select: function(){
            if(this.options.showCheckboxCell){
                this.element.find(".ui-datagrid-checkbox-cell input").prop("checked", true);
            }
            this.element.addClass("active");
            this._selected = true;
            this._trigger("selected", null, this.element);
        },
        unselect: function(){
            this.element.removeClass("active")
                .find(".ui-datagrid-checkbox-cell input")
                .prop("checked", false);
            this._selected = false;
            this._trigger("unselected", null, this.element);
        },
        setValue: function(value){
            var self = this;
            $.each(this._cells, function(i, cell){
                self._renderCell(cell, value);
            });
            this._value = value;
            this._trigger("changed", null, this.element);
        },
        getValue: function(){
            return this._value;
        },
        isSelected: function(){
            return this._selected;
        }
    });
}( jQuery ) );

//兼容保留方法
(function($){
    $.extend($.webui.datagrid.prototype, {
        updateRow: function(index, data){
            if(this._rows[index]){
                this._rows[index].datarow("setValue", data);
                this._trigger("updatedRow", null, {row: this._rows[index], data: data});
            }
        },
        selectRow: function(index){
            if(this._rows[index]){
                this._rows[index].datarow("select");
            }
        },
        unselectRow: function(index){
            if(this._rows[index]){
                this._rows[index].datarow("unselect");
            }
        },
        _setOption: function(key, value){
            var self = this;
            $.Widget.prototype._setOption.apply(self, arguments);
            switch(key){
                case "width": this._renderWidth();break;
                case "height": this._renderHeight();break;
                case "showNumberColumn":
                    this._renderHeaderNumberCell();
                    $.each(this._rows, function(i, row){
                        row.datarow("option", "showNumberCell", value);
                    });
                    break;
                case "singleSelect":
                    this._renderHeaderCheckboxCell();
                    $.each(this._rows, function(i, row){
                        row.datarow("option", "showCheckboxCell", !value);
                    });
                    break;
                case "data": this.setValue(value);break;
                case "columns": this.setColumns(value);break;
            }
        }
    });
    $.extend($.webui.datarow.prototype, {
        _setOption: function(key, value){
            var self = this;
            $.Widget.prototype._setOption.apply(self, arguments);
            switch(key){
                case "data":this.setValue(value);break;
                case "showNumberCell": this._renderNumberCell();break;
                case "showCheckboxCell": this._renderCheckboxCell();break;
            }
        }
    });
}(jQuery));

(function($){
    $.widget("webui.simpleSelect", $.webui.input, {
        }
    );
})(jQuery);
(function($){
    $.widget("webui.complexSelect", $.webui.input, {
            options: {
                required: null,
                name: null,
                source: null,
                single: false,
                textField: null
            },
            _onCreated: function(){
                var thiz = this;
                this._single = this.options.single || this.element.data("single");
                this._source = this.options.source || this.element.data("source") || [];
                this._textField = this.options.textField || this.element.data("textField") || "text";

                this._dropdownMenu = $("<ul style='width: 100%; max-height: 300px;overflow: auto' class='dropdown-menu' role='menu' >");
                
                this.element.css("position", "relative");
                this._dropdown = $("<div data-toggle='dropdown'></div>")
                    .appendTo(this.element)
                    .after(this._dropdownMenu);

                var virtualInput = this._virtualInput = $("<input class='webui-virtual-input'/>");
                this._dropdown.append(virtualInput);
                
                var dropdownTimeout;
                virtualInput.keyup(function(e){
                    if(e.keyCode === $.ui.keyCode.ENTER){
                        return;
                    }
                    var val = virtualInput.val();
                    var width = (val.length * 1) + 2;
                    $(this).width(width.toString() + "em");

                    if(dropdownTimeout){
                        clearTimeout(dropdownTimeout);
                        dropdownTimeout = null;
                    }

                    dropdownTimeout = setTimeout(function(){
                        thiz._renderDropdownMenu();
                        thiz._dropdown.parent().addClass("open");
                    }, 300)
                });

                this._dropdown.click(function(){
                    virtualInput.focus();
                    thiz._renderDropdownMenu();
                });

                this._dropdown.dropdown();
            },
            focus: function(){
                this._virtualInput.focus();
            },
            _renderDropdownMenu: function(){
                var thiz = this;
                this._getSource($.trim(thiz._virtualInput.val()), function(source){
                    thiz._dropdownMenu.empty();
                    $.each(source, function(){
                        var menuContent = this[thiz._textField];
                        if(this.icon){
                            menuContent = "<span class='"+this.icon+"'></span>" + menuContent;
                        }
                        if(this.summary){
                            menuContent += "</br>" + this.summary;
                        }
                        var menu = $("<li><a style='white-space: normal' tabindex='-1' href='#'>"+menuContent+"</a></li>")
                            .data("item", this)
                            .click(function(){
                                var item = $(this).data("item");
                                thiz.appendTag(item);
                                thiz._virtualInput.val("").width("3em").focus();
                                thiz._dropdown.parent().removeClass("open");
                                return false;
                            });
                        thiz._dropdownMenu.append(menu);
                    });
                });
            },
            _getSource: function(keyword, callback){
                var thiz = this;
                if(!keyword){
                    keyword = "";
                }
                keyword = keyword.toLowerCase();
                if($.isArray(this._source)){
                    var source = $.grep(this._source, function(item){
                        return item[thiz._textField].toLowerCase().indexOf(keyword) > -1;
                    });
                    callback(source);
                }
                else if(typeof this._source === "string"){
                    $.getJSON(this._source, {keyword: keyword, t: $.now()}, function(data){
                        callback(data);
                    });
                }
            },
            appendTag: function(item){
                this._appendTag(item);
                this._changed();
            },
            _appendTag: function(item){
                var thiz = this;
                if(this._single){
                    this._dropdown.find(".webui-tag").remove();
                }
                var tagHtml = 
                    "<div tabindex='-1' class='webui-tag'>"+
                        "<button tabindex='-1' type='button' class='close'>&times;</button>"+
                        "<span class='webui-tag-label'></span>"+
                    "</div>";
                var tag = $(tagHtml).data("item", item);
                tag.find(".webui-tag-label").text(item[thiz._textField]);
                tag.find(".close").click(function(e){
                    tag.remove();
                    thiz._changed();
                    e.stopPropagation();
                });
                this._virtualInput.before(tag);
            },
            clearTag: function(){
                var tagsCount = this._clearTag();
                if(tagsCount){
                    this._changed();
                }
            },
            _clearTag: function(){
                var tagsCount = this._dropdown.find(".webui-tag").length;
                this._dropdown.find(".webui-tag").remove();
                return tagsCount;
            },
            getValue: function(){
                var values = [];
                this._dropdown.find(".webui-tag").each(function(){
                    var item = $(this).data("item");
                    values.push(item);
                });
                if(!values.length){
                    return null;
                }
                if(this._single){
                    return values[0];
                }
                return values;
            },
            setValue: function(value){
                var thiz = this;
                this._clearTag();
                var text = "";
                if($.isArray(value)){
                    var texts = [];
                    $.each(value, function(){
                        thiz._appendTag(this);
                        texts.push(this[thiz._textField]);
                    });
                    text = texts.toString();
                }
                else if(value){
                    thiz._appendTag(value);
                    text = value[thiz._textField];
                }
                this._textElement.text(text);
            }
        }
    );
})(jQuery);
(function($){
    $.widget("webui.boolRadio", $.webui.input, {
            _onCreated: function(){
                var thiz = this;
                this._trueText = this.options.trueText || this.element.data("trueText") || "是";
                this._falseText = this.options.falseText || this.element.data("falseText") || "否";
                this._trueRadio = $('<label class="radio-inline"><input type="radio"/> ' + this._trueText + '</label>')
                    .appendTo(this.element)
                    .find("input");
                this._falseRadio = $('<label class="radio-inline"><input type="radio"/> ' + this._falseText + '</label>')
                    .appendTo(this.element)
                    .find("input");
                this.element.find("input")
                    .attr("name", this._name)
                    .click(function(){
                        thiz._changed();
                    });
            },
            getValue: function(){
                if(this._trueRadio.prop("checked")){
                    return true;
                }
                if(this._falseRadio.prop("checked")){
                    return false;
                }
                return null;
            },
            setValue: function(value){
                var text = "";
                if(value === true){
                    this._trueRadio.prop("checked", true);
                    text = this._trueRadio.text();
                }
                else if(value === false){
                    this._falseRadio.prop("checked", true);
                    text = this._falseRadio.text();
                }
                this._textElement.html(text);
            }
        }
    );
})(jQuery);
(function($){
    $.widget("ui.messageBox", {
        options: {
            
        },
        _create: function () {
            var thiz = this;
            var template =
             '<div class="modal">'+
                '<div class="modal-dialog" style="width: 400px; margin: 200px auto;">'+
                    '<div class="modal-content">'+
                        '<div class="modal-header">'+
                            '<h4 class="modal-title">提示</h4>'+
                        '</div>'+
                        '<div class="modal-body">'+
                            '<span class="glyphicon" style="vertical-align:middle; font-size:34px;"></span>'+
                            '<span class="message-box-content" style="display: inline-block; margin-left: 2em;">sdfsdfsd</span>'+
                        '</div>'+
                        '<div class="modal-footer">'+
                            '<input type="button" class="btn btn-ok btn-default" data-dismiss="modal" value="确定" />'+
                            '<input type="button" class="btn btn-cancel btn-default" data-dismiss="modal" value="取消" />'+
                        '</div>'+
                    '</div>'+
                '</div>'+
            '</div>';
            var $template = $(template);
            this._messageContent = $template.find(".message-box-content");
            this._messageIcon = $template.find(".glyphicon");
            this._btnOk = $template.find(".btn-ok").click(function(){
                if(thiz._okCallback){
                    var callback = thiz._okCallback;
                    thiz._okCallback = null;
                    callback();
                }
            });
            this._btnCancel = $template.find(".btn-cancel").click(function(){
                if(thiz._cancelCallback){
                    var callback = thiz._cancelCallback;
                    thiz._cancelCallback = null;
                    callback();
                }
            });
            this._modal = $template.modal({ show: false, backdrop: "static" }).appendTo("body").data("bs.modal");
            $("body").append(template);
        },
        info: function(msg, callback){
            this._okCallback = callback;
            this._modal.show();
            this._btnOk.focus();
            this._messageContent.text(msg);
            this._btnCancel.hide();
            this._messageIcon.attr("class", "").addClass("glyphicon glyphicon-info-sign text-primary");
        },
        warning: function(msg, callback){
            this._okCallback = callback;
            this._modal.show();
            this._btnOk.focus();
            this._messageContent.text(msg);
            this._btnCancel.hide();
            this._messageIcon.attr("class", "").addClass("glyphicon glyphicon-info-sign text-warning");
        },
        confirm: function(msg, okCallback, cancelCallback){
            this._okCallback = okCallback;
            this._cancelCallback = cancelCallback;
            this._modal.show();
            this._btnOk.focus();
            this._messageContent.text(msg);
            this._btnCancel.show();
            this._messageIcon.attr("class", "").addClass("glyphicon glyphicon-question-sign text-primary");
        },
        success: function(msg, callback){
            this._okCallback = callback;
            this._modal.show();
            this._btnOk.focus();
            this._messageContent.text(msg);
            this._btnCancel.hide();
            this._messageIcon.attr("class", "").addClass("glyphicon glyphicon-ok-sign text-success");
        }
    });
})(jQuery); 

(function($){
    $.widget("webui.popoverTrigger", {
            _template: '<div class="popover" ><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>',
            options: {
                placement: "bottom",
                popover: null
	        },
	        _create: function(){
                var thiz = this;
                
                this._popover = this.options.popover;

                this.element.click(function(){
                    thiz.toggle();
                    return false;
                });
                this._popover.click(function(){
                    event.stopPropagation();
                    return false;
                })

                $(document).click(function(event){
                    thiz._popover.hide();
                });
	        },
            show: function(){
                var my, at; 
                var placement = this.options.placement;
                if(placement == 'bottom'){
                    my = "center top";
                    at = "center bottom";
                }
                else if(placement == 'top'){
                    my = "center bottom";
                    at = "center top";
                }
                else if(placement == 'left'){
                    my = "right center";
                    at = "left center";
                }
                else{
                    my = "left center";
                    at = "right center";
                }
                this._popover.show().position({my: my, at: at, of: this.element});
            },
            hide: function(){
                this._popover.hide();
            },
            toggle: function(){
                if(this._popover.is( ":hidden" )){
                    this.show();
                }
                else{
                    this.hide();
                }
            }
        }
    );
})(jQuery);
$(function(){
    $.messageBox = $("body").messageBox().data("messageBox");
});